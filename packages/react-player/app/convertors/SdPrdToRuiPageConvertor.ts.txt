import type { PageConfig, RockConfig, StoreConfig } from "@ruijs/move-style";
import _, { each } from "lodash";
import { find, map } from "lodash";
import { PrBlock } from "~/proton";
import type { SdRpdPage, SdRpdSearchFormItem, SdRpdTablePage } from "~/types/sd-rapid-page-types";
import type { SdRpdDataDictionary, SdRpdEntity } from "~/types/sd-rapid-types";

export interface PageRuiConfigGenerationContext {
  dataStores: StoreConfig[];
}

export interface GenerateRuiPageConfigOption<TPage = SdRpdPage> {
  sdRpdPageConfig: TPage;
  entities: SdRpdEntity[];
  dataDictionaries: SdRpdDataDictionary[];
}


export function generateRuiPageConfigOfError(error: Error) {
  const ruiPageConfig: PageConfig = {
    view: [
      {
        $type: "htmlElement",
        $id: "errorInfoContainer",
        htmlTag: "div",
        children: [
          {
            $type: "text",
            $id: "errorMessage",
            text: error.message,
          },
        ],
      }
    ]
  };

  return ruiPageConfig;
}

export interface GenerateSearchFormControlOption {
  sdRpdSearchFormItem: SdRpdSearchFormItem;
  mainEntity: SdRpdEntity;
  entities: SdRpdEntity[];
  dataDictionaries: SdRpdDataDictionary[]; 
}

export interface FilterConfiguration {
  /**
   * 表单项编号
   */
  code: string;
  /**
   * 字段编号
   */
  field: string;
  /**
   * 过滤操作符
   */
  operator: string;
};

export function generateSearchFormControlConfigForOptionProperty(option: GenerateSearchFormControlOption) {
  const { sdRpdSearchFormItem, mainEntity } = option;

  const rpdField = find(mainEntity.fields, {code: sdRpdSearchFormItem.code})!;
  const dataDictionaryCode = rpdField.dataDictionary;
  let dataDictionary = find(option.dataDictionaries, {code: dataDictionaryCode});

  const searchFormControlConfig: RockConfig = {
    $type: "antdSelect",
    options: dataDictionary ? map(dataDictionary.entries, item => { return { value: item.value, label: item.name }}) : [],
    allowClear: !sdRpdSearchFormItem.required,
    placeholder: sdRpdSearchFormItem.placeholder,
  };
  return searchFormControlConfig;
}

export function generateSearchFormControlConfigForRelationProperty(context: PageRuiConfigGenerationContext, option: GenerateSearchFormControlOption) {
  const { sdRpdSearchFormItem, mainEntity, entities } = option;

  const rpdEntity = find(mainEntity.fields, {code: sdRpdSearchFormItem.code})!;
  const targetEntity = find(entities, {singularCode: rpdEntity.targetSingularCode})!;

  const listDataStoreName = `searchFormItemList-${sdRpdSearchFormItem.code}`;
  const listDataStoreConfig: StoreConfig = {
    type: "httpRequest",
    name: listDataStoreName,
    request: {
      method: "POST",
      url: `/api/${targetEntity.namespace}/${targetEntity.pluralCode}/operations/find`,
      data: {
        // properties: ['id', 'namespace', 'name', 'description', 'dbSchema', 'tableName', 'singularCode', 'pluralCode', 'properties'],
        // orderBy: [
        //   {
        //     field: 'singularCode',
        //   }
        // ]
      }
    },
  };

  context.dataStores.push(listDataStoreConfig);

  const searchFormControlConfig: RockConfig = {
    $type: "antdSelect",
    $exps: {
      options: `_.map($scope.stores['${listDataStoreName}'].data?.list, function (item) { return {label: item.name, value: item.id}})`,
    },
    allowClear: !sdRpdSearchFormItem.required,
    placeholder: sdRpdSearchFormItem.placeholder,
  };
  return searchFormControlConfig;
}

export function generateSearchFormControlConfig(context: PageRuiConfigGenerationContext, option: GenerateSearchFormControlOption) {
  const { sdRpdSearchFormItem, mainEntity } = option;

  const rpdEntity = find(mainEntity.fields, {code: sdRpdSearchFormItem.code})!;
  if (rpdEntity.type === "option") {
    return generateSearchFormControlConfigForOptionProperty(option);
  } else if (rpdEntity.type === "relation") {
    return generateSearchFormControlConfigForRelationProperty(context, option);
  }

  const searchFormControlConfig: RockConfig = {
    $type: "antdInput",
  };
  return searchFormControlConfig;
}

export function generateTableRuiPageConfig(option: GenerateRuiPageConfigOption<SdRpdTablePage>) {
  const { sdRpdPageConfig, entities, dataDictionaries } = option;
  const searchFormConfig = sdRpdPageConfig.searchForm;
  const tableConfig = sdRpdPageConfig.table;
  const mainEntitiyCode = tableConfig.entityCode;
  const mainEntity = find(entities, item => item.code === mainEntitiyCode);
  if (!mainEntity) {
    return generateRuiPageConfigOfError(new Error(`Entitiy with code '${mainEntitiyCode}' not found.`))
  }

  const ruiConfigGenerationContext: PageRuiConfigGenerationContext = {
    dataStores: [],
  };

  const filterConfigurations: FilterConfiguration[] = [];
  each(sdRpdPageConfig.searchForm?.items, formItem => {
    filterConfigurations.push({
      code: formItem.code,
      operator: formItem.filterMode,
      field: formItem.code,
    });
  });

  const listDataStoreConfig: StoreConfig = {
    type: "httpRequest",
    name: "list",
    request: {
      method: "POST",
      url: `/api/${mainEntity.namespace}/${mainEntity.pluralCode}/operations/find`,
      data: {
        // properties: ['id', 'namespace', 'name', 'description', 'dbSchema', 'tableName', 'singularCode', 'pluralCode', 'properties'],
        // orderBy: [
        //   {
        //     field: 'singularCode',
        //   }
        // ]
      }
    },
    $exps: {
      "request.data.pagination": "{offset: ($scope.vars.page - 1) * $scope.vars.pageSize, limit: $scope.vars.pageSize }",
      "request.data.filters": `$functions.searchParamsToFilters(${JSON.stringify(filterConfigurations)}, $scope.vars)`,
    }
  };

  const searchFormItemRocks: RockConfig[] = [];
  if (searchFormConfig && searchFormConfig.items) {
    searchFormConfig.items.forEach((formItemConfig) => {
      const formItemWrapRock: RockConfig = {
        $type: "antdCol",
        span: 8,
        children: {
          $type: "antdFormItem",
          name: formItemConfig.code,
          label: formItemConfig.label,
          children: generateSearchFormControlConfig(ruiConfigGenerationContext, {
            sdRpdSearchFormItem: formItemConfig,
            mainEntity,
            entities,
            dataDictionaries,
          }),
        },
      };

      searchFormItemRocks.push(formItemWrapRock);
    })

  }

  const searchFormRockConfig: RockConfig = {
    $type: "antdForm",
    $id: "searchForm",
    labelCol: { span: 8 },
    wrapCol: { span: 26},
    children: [
      {
        $type: "antdRow",
        gutter: 24,
        children: [
          ...searchFormItemRocks,
          {
            $type: "antdCol",
            span: 8,
            children: [
              {
                $type: "antdButton",
                type: "primary",
                htmlType: "submit",
                children: {
                  $type: "text",
                  text: "搜索",
                },
              }
            ]
          },
        ]
      },
    ],
    onFinish: [
      {
        $action: "script",
        script: (event: any) => {
          const searchParams = Object.assign({}, event.args[0], { page: 1});
          event.scope.setVars(searchParams);
          event.scope.loadStoreData("list");
        }
      }
    ],
    $exps: {
      initialValues: "{code: $scope.vars.code}",
    }
  };

  const tableColumnRocks: RockConfig[] = [];
  tableConfig.columns.forEach((column) => {
    let cell: RockConfig | null = null;
    const rpdField = find(mainEntity.fields, { code: column.code });
    if (rpdField) {
      if (rpdField.type === "option") {
        const dataDictionaryCode = rpdField.dataDictionary;
        let dataDictionary = find(dataDictionaries, {code: dataDictionaryCode})!; 
        cell = {
          $type: "rapidReferenceRenderer",
          list: dataDictionary.entries,
          valueFieldName: "value",
          textFieldName: "name",
          $exps: {
            value: "$slot.value",
          }
        }
      }
    }

    const tableColumnRock: RockConfig = {
      $type: "rapidTableColumn",
      title: column.title,
      dataIndex: column.code,
      key: column.code,
      cell,
    };
    tableColumnRocks.push(tableColumnRock);
  })

  const tableRockConfig: RockConfig = {
    $id: "table",
    $type: "rapidTable",
    $exps: {
      dataSource: "$scope.stores.list.data?.list",
      pagination: "{pageSize: $scope.vars.pageSize, current: $scope.vars.page, total: $scope.stores.list.data?.total}"
    },
    size: "small",
    rowKey: "id",
    rowSelection: {
      type: "checkbox",
    },
    columns: tableColumnRocks,
    onChange: [
      {
        $action: "script",
        script: (event: any) => {
          const [ pagination ] = event.args;
          console.log("handle table.onChange event.")
          event.scope.setVars({
            page: pagination.current,
          })
          console.log(pagination);
        }
      },
      {
        $action: "script",
        script: (event: any) => {
          event.scope.loadStoreData("list");
        }
      }
    ],
  };

  const ruiPageConfig: PageConfig = {
    view: [
      {
        $type: "scope",
        $id: "rootScope",
        initialVars: {
          page: 1,
          pageSize: 5,
        },
        stores: [
          listDataStoreConfig,
          ...ruiConfigGenerationContext.dataStores,
        ],
        children: [
          {
            $type: "box",
            $id: "searchFormContainer",
            className: "rui-page-section",
            children: [
              searchFormRockConfig,
            ],
          },
          {
            $type: "box",
            className: "rui-page-section",
            children: {
              $id: "showControl",
              $type: "show",
              $exps: {
                when: "!!$scope.stores.list.data?.list",
              },
              fallback: {
                $type: "antdSpin",
              },
              children: [
                tableRockConfig,
              ],
            },
          }
        ]
      },
    ],
  };

  return ruiPageConfig;
}

export function generateRuiPageConfig(option: GenerateRuiPageConfigOption) {
  const {sdRpdPageConfig } = option;
  const { templateType } = sdRpdPageConfig;
  if (templateType === "tablePage") {
    return generateTableRuiPageConfig(option as GenerateRuiPageConfigOption<SdRpdTablePage>);
  } else {
    return generateRuiPageConfigOfError(new Error(`Unknown page template type '${templateType}'`));
  }
}